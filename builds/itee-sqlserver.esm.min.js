import*as e from"tedious";import{TAbstractDatabase as t,TAbstractDataController as n}from"itee-database";import{isNull as r,isUndefined as o,isNotString as s,isNotArrayOfString as i,isString as a}from"itee-validators";
/**
 * @author [Ahmed DCHAR]{@link https://github.com/dragoneel}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class l extends t{constructor(t={}){const n={server:"localhost",authentication:{type:"default",options:{userName:"user",password:"password",domain:""}},options:{abortTransactionOnError:!1,appName:void 0,camelCaseColumns:!1,cancelTimeout:5e3,columnNameReplacer:void 0,connectionRetryInterval:500,connectTimeout:15e3,cryptoCredentialsDetails:{},database:void 0,datefirst:7,dateFormat:"mdy",debug:{data:!1,packet:!1,payload:!1,token:!1},enableAnsiNull:!0,enableAnsiNullDefault:!0,enableAnsiPadding:!0,enableAnsiWarnings:!0,enableArithAbort:!1,enableConcatNullYieldsNull:!0,enableCursorCloseOnCommit:null,enableImplicitTransactions:!1,enableNumericRoundabort:!1,enableQuotedIdentifier:!0,encrypt:!1,fallbackToDefaultDb:!1,instanceName:void 0,language:"us_english",localAddress:void 0,maxRetriesOnTransientErrors:3,multiSubnetFailover:!1,packetSize:4096,port:1433,readOnlyIntent:!1,requestTimeout:15e3,rowCollectionOnDone:!1,rowCollectionOnRequestCompletion:!1,tdsVersion:"7_4",textsize:2147483647,trustServerCertificate:!0,useColumnNames:!1,useUTC:!0},...t};n.driver={SqlServerDriver:e,Connection:new e.Connection(n),Request:e.Request},super(n)}close(e){this.driver.Connection.close(),e()}connect(){this.driver.Connection.on("connect",(e=>{if(e)return void this.logger.error(e);const t=this.driver.Connection.config,n=t.server,r=t.options.port,o=t.options.database;this.logger.log(`SQLServer at ms-sql-s://${n}:${r}/${o} is connected !`)}))}init(){super.init()}on(){}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class TSQLServerController
 * @classdesc The TSQLServerController is the base class to perform CRUD operations on the database
 */class u extends n{constructor(e={}){const t={driver:null,tableName:"",columns:[],...e};super(t),this.tableName=t.tableName,this.columns=t.columns}get tableName(){return this._tableName}set tableName(e){const t="Expect an instance of String.";if(r(e))throw new TypeError(`Table name cannot be null ! ${t}`);if(o(e))throw new TypeError(`Table name cannot be undefined ! ${t}`);if(s(e))throw new TypeError(`Table name cannot be an instance of ${e.constructor.name} ! ${t}`);this._tableName=e}get columns(){return this._columns}set columns(e){const t="Expect an array of strings.";if(r(e))throw new TypeError(`Columns cannot be null ! ${t}`);if(o(e))throw new TypeError(`Columns cannot be undefined ! ${t}`);if(i(e))throw new TypeError(`Columns cannot be an instance of ${e.constructor.name} ! ${t}`);this._columns=e}setTableName(e){return this.tableName=e,this}setColumns(e){return this.columns=e,this}_createMany(e,t){super._createMany(e,t);const n=this.columns,r=n.toString();let o=null,s="",i=null;for(let t=0,r=e.length;t<r;t++){o=e[t],s+="(";for(let e in o)n.includes(e)&&(i=o[e],a(i)?s+=`'${i}', `:s+=`${i}, `);s=s.slice(0,-2),s+="), "}s=s.slice(0,-2);const l=`INSERT INTO ${this._tableName} (${r}) VALUES ${s}`,u=new this._driver.Request(l,this.return(t));this._driver.Connection.execSql(u)}_createOne(e,t){super._createOne(e,t);const n=this.columns;let r="",o=null,s="",i=null;for(let t=0,l=n.length;t<l;t++)o=n[t],i=e[o],i&&(r+=`${o}, `,a(i)?s+=`'${i}', `:s+=`${i}, `);r=r.slice(0,-2),s=s.slice(0,-2);const l=`INSERT INTO ${this._tableName} (${r}) VALUES (${s})`,u=new this._driver.Request(l,this.return(t));this._driver.Connection.execSql(u)}_deleteAll(e){super._deleteAll(e);const t=`TRUNCATE TABLE ${this._tableName}`,n=new this._driver.Request(t,this.return(e));this._driver.Connection.execSql(n)}_deleteMany(e,t){super._deleteMany(e,t);const n=`DELETE FROM ${this._tableName} WHERE id IN (${e})`,r=new this._driver.Request(n,this.return(t));this._driver.Connection.execSql(r)}_deleteOne(e,t){super._deleteOne(e,t);const n=`DELETE FROM ${this._tableName} WHERE id=${e}`,r=new this._driver.Request(n,this.return(t));this._driver.Connection.execSql(r)}_deleteWhere(e,t){super._deleteWhere(e,t),n.returnError("Unimplemented methods (DELETE WHERE)",t)}_readAll(e,t){super._readAll(e,t);const r=`SELECT * FROM ${this.tableName}`,o=new this._driver.Request(r,((e,r,o)=>{e?n.returnError(e,t):0===o.length?n.returnNotFound(t):n.returnData(o,t)}));o.on("row",(e=>{let t={};e.forEach((e=>{t[e.metadata.colName]=e.value}))})),this._driver.Connection.execSql(o)}_readMany(e,t,r){super._readMany(e,t,r);const o=e.toString(),s=`SELECT * FROM ${this.tableName} WHERE id IN (${o})`,i=new this._driver.Request(s,((e,t,o)=>{e?n.returnError(e,r):0===o.length?n.returnNotFound(r):n.returnData(o,r)}));i.on("row",(e=>{let t={};e.forEach((e=>{t[e.metadata.colName]=e.value}))})),this._driver.Connection.execSql(i)}_readOne(e,t,r){super._readOne(e,t,r);const o=`SELECT * FROM ${this.tableName} WHERE id=${e}`,s=new this._driver.Request(o,((e,t,o)=>{e?n.returnError(e,r):0===o.length?n.returnNotFound(r):n.returnData(o,r)}));s.on("row",(e=>{let t={};e.forEach((e=>{t[e.metadata.colName]=e.value}))})),this._driver.Connection.execSql(s)}_readWhere(e,t,r){super._readWhere(e,t,r),n.returnError("Unimplemented methods (READ WHERE)",r)}_updateAll(e,t){super._updateAll(e,t);let n="";for(let t in e){const r=e[t];a(r)?n+=`${t} = '${r}', `:n+=`${t} = ${r}, `}n=n.slice(0,-2);const r=`UPDATE ${this._tableName} SET ${n}`,o=new this._driver.Request(r,this.return(t));this._driver.Connection.execSql(o)}_updateMany(e,t,n){super._updateMany(e,t,n);let r="",o=null;for(let e in t)o=t[e],a(o)?r+=`${e} = '${o}', `:r+=`${e} = ${o}, `;r=r.slice(0,-2);const s=`UPDATE ${this._tableName} SET ${r} WHERE id IN (${e})`,i=new this._driver.Request(s,this.return(n));this._driver.Connection.execSql(i)}_updateOne(e,t,n){super._updateOne(e,t,n);let r="",o=null;for(let e in t)o=t[e],a(o)?r+=`${e} = '${o}', `:r+=`${e} = ${o}, `;r=r.slice(0,-2);const s=`UPDATE ${this._tableName} SET ${r} WHERE id=${e}`,i=new this._driver.Request(s,this.return(n));this._driver.Connection.execSql(i)}_updateWhere(e,t,r){super._updateWhere(e,t,r),n.returnError("Unimplemented methods (UPDATE WHERE)",r)}}export{u as TSQLServerController,l as TSQLServerDatabase};
