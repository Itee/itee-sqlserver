"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("tedious"),t=require("itee-database"),r=require("itee-validators");class n extends t.TAbstractDatabase{constructor(t={}){const r={server:"localhost",authentication:{type:"default",options:{userName:"user",password:"password",domain:""}},options:{abortTransactionOnError:!1,appName:void 0,camelCaseColumns:!1,cancelTimeout:5e3,columnNameReplacer:void 0,connectionRetryInterval:500,connectTimeout:15e3,cryptoCredentialsDetails:{},database:void 0,datefirst:7,dateFormat:"mdy",debug:{data:!1,packet:!1,payload:!1,token:!1},enableAnsiNull:!0,enableAnsiNullDefault:!0,enableAnsiPadding:!0,enableAnsiWarnings:!0,enableArithAbort:!1,enableConcatNullYieldsNull:!0,enableCursorCloseOnCommit:null,enableImplicitTransactions:!1,enableNumericRoundabort:!1,enableQuotedIdentifier:!0,encrypt:!1,fallbackToDefaultDb:!1,instanceName:void 0,language:"us_english",localAddress:void 0,maxRetriesOnTransientErrors:3,multiSubnetFailover:!1,packetSize:4096,port:1433,readOnlyIntent:!1,requestTimeout:15e3,rowCollectionOnDone:!1,rowCollectionOnRequestCompletion:!1,tdsVersion:"7_4",textsize:2147483647,trustServerCertificate:!0,useColumnNames:!1,useUTC:!0},...t};r.driver={SqlServerDriver:e,Connection:new e.Connection(r),Request:e.Request},super(r)}close(e){this.driver.Connection.close(),e()}connect(){this.driver.Connection.on("connect",e=>{if(e)return void console.error(e);const t=this.driver.Connection.config,r=t.server,n=t.options.port,o=t.options.database;console.log(`SQLServer at ms-sql-s://${r}:${n}/${o} is connected !`)})}init(){super.init()}on(){}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class TSQLServerController
 * @classdesc The TSQLServerController is the base class to perform CRUD operations on the database
 */class o extends t.TAbstractDataController{constructor(e={}){const t={driver:null,tableName:"",columns:[],...e};super(t),this.tableName=t.tableName,this.columns=t.columns}get tableName(){return this._tableName}set tableName(e){const t="Expect an instance of String.";if(r.isNull(e))throw new TypeError(`Table name cannot be null ! ${t}`);if(r.isUndefined(e))throw new TypeError(`Table name cannot be undefined ! ${t}`);if(r.isNotString(e))throw new TypeError(`Table name cannot be an instance of ${e.constructor.name} ! ${t}`);this._tableName=e}get columns(){return this._columns}set columns(e){const t="Expect an array of strings.";if(r.isNull(e))throw new TypeError(`Columns cannot be null ! ${t}`);if(r.isUndefined(e))throw new TypeError(`Columns cannot be undefined ! ${t}`);if(r.isNotArrayOfString(e))throw new TypeError(`Columns cannot be an instance of ${e.constructor.name} ! ${t}`);this._columns=e}setTableName(e){return this.tableName=e,this}setColumns(e){return this.columns=e,this}_createMany(e,t){super._createMany(e,t);const n=this.columns,o=n.toString();let s=null,a="",l=null;for(let t=0,o=e.length;t<o;t++){s=e[t],a+="(";for(let e in s)n.includes(e)&&(l=s[e],r.isString(l)?a+=`'${l}', `:a+=`${l}, `);a=a.slice(0,-2),a+="), "}a=a.slice(0,-2);const i=`INSERT INTO ${this._tableName} (${o}) VALUES ${a}`,c=new this._driver.Request(i,this.return(t));this._driver.Connection.execSql(c)}_createOne(e,t){super._createOne(e,t);const n=this.columns;let o="",s=null,a="",l=null;for(let t=0,i=n.length;t<i;t++)s=n[t],l=e[s],l&&(o+=`${s}, `,r.isString(l)?a+=`'${l}', `:a+=`${l}, `);o=o.slice(0,-2),a=a.slice(0,-2);const i=`INSERT INTO ${this._tableName} (${o}) VALUES (${a})`,c=new this._driver.Request(i,this.return(t));this._driver.Connection.execSql(c)}_deleteAll(e){super._deleteAll(e);const t=`TRUNCATE TABLE ${this._tableName}`,r=new this._driver.Request(t,this.return(e));this._driver.Connection.execSql(r)}_deleteMany(e,t){super._deleteMany(e,t);const r=`DELETE FROM ${this._tableName} WHERE id IN (${e})`,n=new this._driver.Request(r,this.return(t));this._driver.Connection.execSql(n)}_deleteOne(e,t){super._deleteOne(e,t);const r=`DELETE FROM ${this._tableName} WHERE id=${e}`,n=new this._driver.Request(r,this.return(t));this._driver.Connection.execSql(n)}_deleteWhere(e,r){super._deleteWhere(e,r),t.TAbstractDataController.returnError("Unimplemented methods (DELETE WHERE)",r)}_readAll(e,r){super._readAll(e,r);const n=`SELECT * FROM ${this.tableName}`,o=new this._driver.Request(n,(e,n,o)=>{console.log(`Get ${n} elements.`),e?t.TAbstractDataController.returnError(e,r):0===o.length?t.TAbstractDataController.returnNotFound(r):t.TAbstractDataController.returnData(o,r)});o.on("row",e=>{let t={};e.forEach(e=>{t[e.metadata.colName]=e.value})}),this._driver.Connection.execSql(o)}_readMany(e,r,n){super._readMany(e,r,n);const o=e.toString(),s=`SELECT * FROM ${this.tableName} WHERE id IN (${o})`,a=new this._driver.Request(s,(e,r,o)=>{console.log(`Get ${r} elements !`),e?t.TAbstractDataController.returnError(e,n):0===o.length?t.TAbstractDataController.returnNotFound(n):t.TAbstractDataController.returnData(o,n)});a.on("row",e=>{let t={};e.forEach(e=>{t[e.metadata.colName]=e.value})}),this._driver.Connection.execSql(a)}_readOne(e,r,n){super._readOne(e,r,n);const o=`SELECT * FROM ${this.tableName} WHERE id=${e}`,s=new this._driver.Request(o,(e,r,o)=>{console.log(`Get ${r} elements !`),e?t.TAbstractDataController.returnError(e,n):0===o.length?t.TAbstractDataController.returnNotFound(n):t.TAbstractDataController.returnData(o,n)});s.on("row",e=>{let t={};e.forEach(e=>{t[e.metadata.colName]=e.value})}),this._driver.Connection.execSql(s)}_readWhere(e,r,n){super._readWhere(e,r,n),t.TAbstractDataController.returnError("Unimplemented methods (READ WHERE)",n)}_updateAll(e,t){super._updateAll(e,t);let n="";for(let t in e){const o=e[t];r.isString(o)?n+=`${t} = '${o}', `:n+=`${t} = ${o}, `}n=n.slice(0,-2);const o=`UPDATE ${this._tableName} SET ${n}`,s=new this._driver.Request(o,this.return(t));this._driver.Connection.execSql(s)}_updateMany(e,t,n){super._updateMany(e,t,n);let o="",s=null;for(let e in t)s=t[e],r.isString(s)?o+=`${e} = '${s}', `:o+=`${e} = ${s}, `;o=o.slice(0,-2);const a=`UPDATE ${this._tableName} SET ${o} WHERE id IN (${e})`,l=new this._driver.Request(a,this.return(n));this._driver.Connection.execSql(l)}_updateOne(e,t,n){super._updateOne(e,t,n);let o="",s=null;for(let e in t)s=t[e],r.isString(s)?o+=`${e} = '${s}', `:o+=`${e} = ${s}, `;o=o.slice(0,-2);const a=`UPDATE ${this._tableName} SET ${o} WHERE id=${e}`,l=new this._driver.Request(a,this.return(n));this._driver.Connection.execSql(l)}_updateWhere(e,r,n){super._updateWhere(e,r,n),t.TAbstractDataController.returnError("Unimplemented methods (UPDATE WHERE)",n)}}exports.TSQLServerController=o,exports.TSQLServerDatabase=n;
