"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var r=require("tedious"),t=require("itee-validators"),n=e(require("path")),s=require("buffer"),i=e(require("fs")),a=require("stream");console.log("Itee.Database v8.0.0 - EsModule");
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class TDatabaseController
 * @classdesc The TDatabaseController is the base class to perform CRUD operations on the database
 */
class o{static __checkData(e,r,n){const s=r.body,i=r.params,a=r.query;return t.isDefined(s)&&s[e]?s[e]:t.isDefined(i)&&i[e]?i[e]:t.isDefined(a)&&a[e]?a[e]:void o.returnError({title:"Erreur de paramètre",message:`${e} n'existe pas dans les paramètres !`},n)}static _formatError(e){let r=[];if(t.isArray(e))for(let t=0,n=e.length;t<n;++t)r=r.concat(o._formatError(e[t]));else if(t.isObject(e))if("ValidationError"===e.name){let t="",n=e.errors;for(let e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t+=n[e].message+"<br>");r.push({title:"Erreur de validation",message:t||"Aucun message d'erreur... Gloups !"})}else"VersionError"===e.name?r.push({title:"Erreur de base de donnée",message:"Aucun document correspondant n'as put être trouvé pour la requete !"}):r.push({title:e.title||"Erreur",message:e.message||"Aucun message d'erreur... Gloups !"});else{if(!t.isString(e))throw new Error(`Unknown error type: ${e} !`);r.push({title:"Erreur",message:e})}return r}static returnNotFound(e){if(t.isFunction(e))return e();e.headersSent||e.status(204).end()}static returnError(e,r){if(t.isFunction(r))return r(e,null);if(r.headersSent)return;const n=o._formatError(e);r.format({"application/json":()=>{r.status(500).json(n)},default:()=>{r.status(406).send("Not Acceptable")}})}static returnData(e,r){if(t.isFunction(r))return r(null,e);if(r.headersSent)return;const n=t.isArray(e)?e:[e];r.format({"application/json":()=>{r.status(200).json(n)},default:()=>{r.status(406).send("Not Acceptable")}})}static returnErrorAndData(e,r,n){if(t.isFunction(n))return n(e,r);if(n.headersSent)return;const s={errors:e,datas:r};n.format({"application/json":()=>{n.status(416).json(s)},default:()=>{n.status(416).send("Range Not Satisfiable")}})}constructor(e={}){const r={driver:null,useNext:!1,...e};this._driver=r.driver,this._useNext=r.useNext}return(e,r={}){const n=Object.assign({immediate:null,beforeAll:null,beforeReturnErrorAndData:null,afterReturnErrorAndData:null,beforeReturnError:null,afterReturnError:null,beforeReturnData:null,afterReturnData:null,beforeReturnNotFound:null,afterReturnNotFound:null,afterAll:null},r,{returnErrorAndData:o.returnErrorAndData.bind(this),returnError:o.returnError.bind(this),returnData:o.returnData.bind(this),returnNotFound:o.returnNotFound.bind(this)});return n.immediate&&n.immediate(),function(r=null,s=null){const i=t.isDefined(s),a=t.isDefined(r);n.beforeAll&&n.beforeAll(),i&&a?(n.beforeReturnErrorAndData&&n.beforeReturnErrorAndData(r,s),n.returnErrorAndData(r,s,e),n.afterReturnErrorAndData&&n.afterReturnErrorAndData(r,s)):i&&!a?(n.beforeReturnData&&n.beforeReturnData(s),n.returnData(s,e),n.afterReturnData&&n.afterReturnData(s)):!i&&a?(n.beforeReturnError&&n.beforeReturnError(r),n.returnError(r,e),n.afterReturnError&&n.afterReturnError(r)):i||a||(n.beforeReturnNotFound&&n.beforeReturnNotFound(),n.returnNotFound(e),n.afterReturnNotFound&&n.afterReturnNotFound()),n.afterAll&&n.afterAll()}}create(e,r,n){const s=e.body;t.isNotDefined(s)?o.returnError({title:"Erreur de paramètre",message:"Le corps de la requete ne peut pas être null ou indefini."},this._useNext?n:r):t.isArray(s)?t.isEmptyArray(s)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'objet de la requete ne peut pas être vide."},this._useNext?n:r):this._createMany(s,r,n):t.isObject(s)?t.isEmptyObject(s)?o.returnError({title:"Erreur de paramètre",message:"L'objet de la requete ne peut pas être vide."},this._useNext?n:r):this._createOne(s,r,n):o.returnError({title:"Erreur de paramètre",message:"Le type de donnée de la requete est invalide. Les paramètres valides sont objet ou un tableau d'objet."},this._useNext?n:r)}_createOne(){}_createMany(){}read(e,r,n){const s=e.params.id,i=e.body,a=t.isDefined(i),u=a?i.ids:null,l=a?i.query:null,d=a?i.projection:null;t.isDefined(s)?t.isNotString(s)?o.returnError({title:"Erreur de paramètre",message:"L'identifiant devrait être une chaine de caractères."},this._useNext?n:r):t.isEmptyString(s)||t.isBlankString(s)?o.returnError({title:"Erreur de paramètre",message:"L'identifiant ne peut pas être une chaine de caractères vide."},this._useNext?n:r):this._readOne(s,d,r,n):t.isDefined(u)?t.isNotArray(u)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'identifiants devrait être un tableau de chaine de caractères."},this._useNext?n:r):t.isEmptyArray(u)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'identifiants ne peut pas être vide."},this._useNext?n:r):this._readMany(u,d,r,n):t.isDefined(l)?t.isNotObject(l)?o.returnError({title:"Erreur de paramètre",message:"La requete devrait être un objet javascript."},this._useNext?n:r):t.isEmptyObject(l)?this._readAll(d,r,n):this._readWhere(l,d,r,n):o.returnError({title:"Erreur de paramètre",message:"La requete ne peut pas être null."},this._useNext?n:r)}_readOne(){}_readMany(){}_readWhere(){}_readAll(){}update(e,r,n){const s=e.params.id,i=e.body,a=t.isDefined(i),u=a?i.ids:null,l=a?i.query:null,d=a?i.update:null;t.isNotDefined(d)?o.returnError({title:"Erreur de paramètre",message:"La mise à jour a appliquer ne peut pas être null ou indefini."},this._useNext?n:r):t.isDefined(s)?t.isNotString(s)?o.returnError({title:"Erreur de paramètre",message:"L'identifiant devrait être une chaine de caractères."},this._useNext?n:r):t.isEmptyString(s)||t.isBlankString(s)?o.returnError({title:"Erreur de paramètre",message:"L'identifiant ne peut pas être une chaine de caractères vide."},this._useNext?n:r):this._updateOne(s,d,r,n):t.isDefined(u)?t.isNotArray(u)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'identifiants devrait être un tableau de chaine de caractères."},this._useNext?n:r):t.isEmptyArray(u)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'identifiants ne peut pas être vide."},this._useNext?n:r):this._updateMany(u,d,r,n):t.isDefined(l)?t.isNotObject(l)?o.returnError({title:"Erreur de paramètre",message:"La requete devrait être un objet javascript."},this._useNext?n:r):t.isEmptyObject(l)?this._updateAll(d,r,n):this._updateWhere(l,d,r,n):o.returnError({title:"Erreur de paramètre",message:"La requete ne peut pas être vide."},this._useNext?n:r)}_updateOne(){}_updateMany(){}_updateWhere(){}_updateAll(){}delete(e,r,n){const s=e.params.id,i=e.body,a=t.isDefined(i),u=a?i.ids:null,l=a?i.query:null;t.isDefined(s)?t.isNotString(s)?o.returnError({title:"Erreur de paramètre",message:"L'identifiant devrait être une chaine de caractères."},this._useNext?n:r):t.isEmptyString(s)||t.isBlankString(s)?o.returnError({title:"Erreur de paramètre",message:"L'identifiant ne peut pas être une chaine de caractères vide."},this._useNext?n:r):this._deleteOne(s,r,n):t.isDefined(u)?t.isNotArray(u)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'identifiants devrait être un tableau de chaine de caractères."},this._useNext?n:r):t.isEmptyArray(u)?o.returnError({title:"Erreur de paramètre",message:"Le tableau d'identifiants ne peut pas être vide."},this._useNext?n:r):this._deleteMany(u,r,n):t.isDefined(l)?t.isNotObject(l)?o.returnError({title:"Erreur de paramètre",message:"La requete devrait être un objet javascript."},this._useNext?n:r):t.isEmptyObject(l)?this._deleteAll(r,n):this._deleteWhere(l,r,n):o.returnError({title:"Erreur de paramètre",message:"La requete ne peut pas être vide."},this._useNext?n:r)}_deleteOne(){}_deleteMany(){}_deleteWhere(){}_deleteAll(){}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */class u extends a.Writable{constructor(e){super(e);const r=e.bufferSize||s.kStringMaxLength;this.memoryBuffer=Buffer.alloc(r),this.offset=0}_final(e){e()}_write(e,r,t){const n=Buffer.isBuffer(e)?e:new Buffer(e,r);for(let e=0,r=n.length;e<r;e++)this.memoryBuffer[this.offset]=n[e],this.offset++;t()}_writev(e,r){for(let r=0,t=e.length;r<t;r++)this.memoryBuffer=Buffer.concat([this.memoryBuffer,e[r]]);r()}_releaseMemory(){this.memoryBuffer=null}toArrayBuffer(){const e=this.memoryBuffer,r=new ArrayBuffer(e.length),t=new Uint8Array(r);for(let r=0;r<e.length;++r)t[r]=e[r];return this._releaseMemory(),r}toJSON(){return JSON.parse(this.toString())}toString(){const e=this.memoryBuffer.toString();return this._releaseMemory(),e}}class l{constructor(e={}){const r={dumpType:l.DumpType.ArrayBuffer,...e};this.dumpType=r.dumpType,this._isProcessing=!1,this._queue=[]}get dumpType(){return this._dumpType}set dumpType(e){if(t.isNull(e))throw new TypeError("Dump type cannot be null ! Expect a non empty string.");if(t.isUndefined(e))throw new TypeError("Dump type cannot be undefined ! Expect a non empty string.");this._dumpType=e}setDumpType(e){return this.dumpType=e,this}convert(e,r,t,n,s){e?(this._queue.push({file:e,parameters:r,onSuccess:t,onProgress:n,onError:s}),this._processQueue()):s("File cannot be null or empty, aborting file convertion !!!")}_processQueue(){if(0===this._queue.length||this._isProcessing)return;this._isProcessing=!0;const e=this,r=this._queue.shift(),n=r.file,s=r.parameters,i=r.onSuccess,a=r.onProgress,o=r.onError;if(t.isString(n))e._dumpFileInMemoryAs(e._dumpType,n,s,u,c,p);else{const r=n.data;switch(e._dumpType){case l.DumpType.ArrayBuffer:{const e=r.length,t=new ArrayBuffer(e),n=new Uint8Array(t);for(let t=0;t<e;++t)n[t]=r[t];u(t)}break;case l.DumpType.JSON:u(JSON.parse(r.toString()));break;case l.DumpType.String:u(r.toString());break;default:throw new RangeError(`Invalid switch parameter: ${e._dumpType}`)}}function u(r){e._convert(r,s,d,c,p)}function d(r){i(r),e._isProcessing=!1,e._processQueue()}function c(e){a(e)}function p(r){o(r),e._isProcessing=!1,e._processQueue()}}_dumpFileInMemoryAs(e,r,t,n,s,a){let o=!1;const d=i.createReadStream(r);d.on("error",e=>{console.error(`Read stream on error: ${e}`),o=!0,a(e)});const c=parseInt(t.fileSize),p=new u({bufferSize:c});p.on("error",e=>{o=!0,a(e)}),p.on("finish",()=>{if(!o){switch(e){case l.DumpType.ArrayBuffer:n(p.toArrayBuffer());break;case l.DumpType.String:n(p.toString());break;case l.DumpType.JSON:n(p.toJSON());break;default:throw new RangeError(`Invalid switch parameter: ${e}`)}d.unpipe(),d.close(),p.end()}}),d.pipe(p)}_convert(){}}l.MAX_FILE_SIZE=67108864,l.DumpType=Object.freeze({ArrayBuffer:0,String:1,JSON:2});
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */
class d{static _registerRoutesTo(e,r,t,n,s){for(let i=0,a=s.length;i<a;i++){const a=s[i],o=new(n.get(a.controller.name))({driver:e,...a.controller.options}),u=t({mergeParams:!0});console.log(`\tAdd controller for base route: ${a.route}`),r.use(a.route,d._populateRouter(u,o,a.controller.can))}}static _populateRouter(e,r,t={}){for(let n in t){const s=t[n];console.log(`\t\tMap route ${s.over} on (${s.on}) to ${r.constructor.name}.${n} method.`),e[s.on](s.over,r[n].bind(r))}return e}constructor(e={}){const r={controllers:new Map,descriptors:[],...e};this.controllers=r.controllers,this.descriptors=r.descriptors,this.__dirname=void 0}get controllers(){return this._controllers}set controllers(e){if(t.isNull(e))throw new TypeError("Controllers cannot be null ! Expect a map of controller.");if(t.isUndefined(e))throw new TypeError("Controllers cannot be undefined ! Expect a map of controller.");if(!(e instanceof Map))throw new TypeError(`Controllers cannot be an instance of ${e.constructor.name} ! Expect a map of controller.`);this._controllers=e}get descriptors(){return this._descriptors}set descriptors(e){if(t.isNull(e))throw new TypeError("Descriptors cannot be null ! Expect an array of POJO.");if(t.isUndefined(e))throw new TypeError("Descriptors cannot be undefined ! Expect an array of POJO.");this._descriptors=e}addController(e){return this._controllers.set(e.name,e),this}addDescriptor(e){return this._descriptors.push(e),this}beforeRegisterRoutes(){}registerTo(e,r,t){this.beforeRegisterRoutes(e),d._registerRoutesTo(e,r,t,this._controllers,this._descriptors)}}
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */exports.TSQLServerController=
/**
 * @author [Tristan Valcke]{@link https://github.com/Itee}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @class TSQLServerController
 * @classdesc The TSQLServerController is the base class to perform CRUD operations on the database
 */
class extends o{constructor(e={}){const r={driver:null,tableName:"",columns:[],...e};super(r),this.tableName=r.tableName,this.columns=r.columns}get tableName(){return this._tableName}set tableName(e){const r="Expect an instance of String.";if(t.isNull(e))throw new TypeError(`Table name cannot be null ! ${r}`);if(t.isUndefined(e))throw new TypeError(`Table name cannot be undefined ! ${r}`);if(t.isNotString(e))throw new TypeError(`Table name cannot be an instance of ${e.constructor.name} ! ${r}`);this._tableName=e}get columns(){return this._columns}set columns(e){const r="Expect an array of strings.";if(t.isNull(e))throw new TypeError(`Columns cannot be null ! ${r}`);if(t.isUndefined(e))throw new TypeError(`Columns cannot be undefined ! ${r}`);if(t.isNotArrayOfString(e))throw new TypeError(`Columns cannot be an instance of ${e.constructor.name} ! ${r}`);this._columns=e}setTableName(e){return this.tableName=e,this}setColumns(e){return this.columns=e,this}_createMany(e,r){super._createMany(e,r);const n=this.columns,s=n.toString();let i=null,a="",o=null;for(let r=0,s=e.length;r<s;r++){i=e[r],a+="(";for(let e in i)n.includes(e)&&(o=i[e],t.isString(o)?a+=`'${o}', `:a+=`${o}, `);a=a.slice(0,-2),a+="), "}a=a.slice(0,-2);const u=`INSERT INTO ${this._tableName} (${s}) VALUES ${a}`,l=new this._driver.Request(u,this.return(r));this._driver.Connection.execSql(l)}_createOne(e,r){super._createOne(e,r);const n=this.columns;let s="",i=null,a="",o=null;for(let r=0,u=n.length;r<u;r++)i=n[r],o=e[i],o&&(s+=`${i}, `,t.isString(o)?a+=`'${o}', `:a+=`${o}, `);s=s.slice(0,-2),a=a.slice(0,-2);const u=`INSERT INTO ${this._tableName} (${s}) VALUES (${a})`,l=new this._driver.Request(u,this.return(r));this._driver.Connection.execSql(l)}_deleteAll(e){super._deleteAll(e);const r=`TRUNCATE TABLE ${this._tableName}`,t=new this._driver.Request(r,this.return(e));this._driver.Connection.execSql(t)}_deleteMany(e,r){super._deleteMany(e,r);const t=`DELETE FROM ${this._tableName} WHERE id IN (${e})`,n=new this._driver.Request(t,this.return(r));this._driver.Connection.execSql(n)}_deleteOne(e,r){super._deleteOne(e,r);const t=`DELETE FROM ${this._tableName} WHERE id=${e}`,n=new this._driver.Request(t,this.return(r));this._driver.Connection.execSql(n)}_deleteWhere(e,r){super._deleteWhere(e,r),o.returnError("Unimplemented methods (DELETE WHERE)",r)}_readAll(e,r){super._readAll(e,r);const t=`SELECT * FROM ${this.tableName}`,n=new this._driver.Request(t,(e,t,n)=>{console.log(`Get ${t} elements.`),e?o.returnError(e,r):0===n.length?o.returnNotFound(r):o.returnData(n,r)});n.on("row",e=>{let r={};e.forEach(e=>{r[e.metadata.colName]=e.value})}),this._driver.Connection.execSql(n)}_readMany(e,r,t){super._readMany(e,r,t);const n=e.toString(),s=`SELECT * FROM ${this.tableName} WHERE id IN (${n})`,i=new this._driver.Request(s,(e,r,n)=>{console.log(`Get ${r} elements !`),e?o.returnError(e,t):0===n.length?o.returnNotFound(t):o.returnData(n,t)});i.on("row",e=>{let r={};e.forEach(e=>{r[e.metadata.colName]=e.value})}),this._driver.Connection.execSql(i)}_readOne(e,r,t){super._readOne(e,r,t);const n=`SELECT * FROM ${this.tableName} WHERE id=${e}`,s=new this._driver.Request(n,(e,r,n)=>{console.log(`Get ${r} elements !`),e?o.returnError(e,t):0===n.length?o.returnNotFound(t):o.returnData(n,t)});s.on("row",e=>{let r={};e.forEach(e=>{r[e.metadata.colName]=e.value})}),this._driver.Connection.execSql(s)}_readWhere(e,r,t){super._readWhere(e,r,t),o.returnError("Unimplemented methods (READ WHERE)",t)}_updateAll(e,r){super._updateAll(e,r);let n="";for(let r in e){const s=e[r];t.isString(s)?n+=`${r} = '${s}', `:n+=`${r} = ${s}, `}n=n.slice(0,-2);const s=`UPDATE ${this._tableName} SET ${n}`,i=new this._driver.Request(s,this.return(r));this._driver.Connection.execSql(i)}_updateMany(e,r,n){super._updateMany(e,r,n);let s="",i=null;for(let e in r)i=r[e],t.isString(i)?s+=`${e} = '${i}', `:s+=`${e} = ${i}, `;s=s.slice(0,-2);const a=`UPDATE ${this._tableName} SET ${s} WHERE id IN (${e})`,o=new this._driver.Request(a,this.return(n));this._driver.Connection.execSql(o)}_updateOne(e,r,n){super._updateOne(e,r,n);let s="",i=null;for(let e in r)i=r[e],t.isString(i)?s+=`${e} = '${i}', `:s+=`${e} = ${i}, `;s=s.slice(0,-2);const a=`UPDATE ${this._tableName} SET ${s} WHERE id=${e}`,o=new this._driver.Request(a,this.return(n));this._driver.Connection.execSql(o)}_updateWhere(e,r,t){super._updateWhere(e,r,t),o.returnError("Unimplemented methods (UPDATE WHERE)",t)}},exports.TSQLServerDatabase=class extends class{constructor(e={}){const r={driver:null,application:null,router:null,plugins:[],...e};this.driver=r.driver,this.application=r.application,this.router=r.router,this.plugins=r.plugins,this.init(),this._registerPlugins()}get plugins(){return this._plugins}set plugins(e){if(t.isNull(e))throw new TypeError("Plugins cannot be null ! Expect an array of TDatabasePlugin.");if(t.isUndefined(e))throw new TypeError("Plugins cannot be undefined ! Expect an array of TDatabasePlugin.");this._plugins=e}get router(){return this._router}set router(e){if(t.isNull(e))throw new TypeError("Router cannot be null ! Expect a Express Router.");if(t.isUndefined(e))throw new TypeError("Router cannot be undefined ! Expect a Express Router.");this._router=e}get application(){return this._application}set application(e){if(t.isNull(e))throw new TypeError("Application cannot be null ! Expect a Express Application.");if(t.isUndefined(e))throw new TypeError("Application cannot be undefined ! Expect a Express Application.");this._application=e}get driver(){return this._driver}set driver(e){if(t.isNull(e))throw new TypeError("Driver cannot be null ! Expect a database driver.");if(t.isUndefined(e))throw new TypeError("Driver cannot be undefined ! Expect a database driver.");this._driver=e}setPlugins(e){return this.plugins=e,this}setRouter(e){return this.router=e,this}setApplication(e){return this.application=e,this}setDriver(e){return this.driver=e,this}init(){}_registerPlugins(){for(let[e,r]of Object.entries(this._plugins))this._registerPackagePlugin(e,r)?console.log(`Use ${e} plugin from node_modules`):this._registerLocalPlugin(e,r)?console.log(`Use ${e} plugin from local folder`):console.error(`Unable to register the plugin ${e} the package or local folder doesn't seem to exist ! Skip it.`)}_registerPackagePlugin(e){let r=!1;try{const t=require(e);t instanceof d?(t.__dirname=n.dirname(require.resolve(e)),t.registerTo(this._driver,this._application,this._router),r=!0):console.error(`The plugin ${e} doesn't seem to be an instance of an extended class from TAbstractDatabasePlugin ! Skip it.`)}catch(e){e.code&&"MODULE_NOT_FOUND"===e.code||console.error(e)}return r}_registerLocalPlugin(e){let r=!1;try{const t=n.join(__dirname,"../../../","databases/plugins/",e,`${e}.js`),s=require(t);s instanceof d?(s.__dirname=n.dirname(require.resolve(t)),s.registerTo(this._driver,this._application,this._router),r=!0):console.error(`The plugin ${e} doesn't seem to be an instance of an extended class from TAbstractDatabasePlugin ! Skip it.`)}catch(e){console.error(e)}return r}connect(){}close(){}on(){}}
/**
 * @author [Ahmed DCHAR]{@link https://github.com/dragoneel}
 * @license [BSD-3-Clause]{@link https://opensource.org/licenses/BSD-3-Clause}
 *
 * @file Todo
 *
 * @example Todo
 *
 */{constructor(e={}){const t={server:"localhost",authentication:{type:"default",options:{userName:"user",password:"password",domain:""}},options:{abortTransactionOnError:!1,appName:void 0,camelCaseColumns:!1,cancelTimeout:5e3,columnNameReplacer:void 0,connectionRetryInterval:500,connectTimeout:15e3,cryptoCredentialsDetails:{},database:void 0,datefirst:7,dateFormat:"mdy",debug:{data:!1,packet:!1,payload:!1,token:!1},enableAnsiNull:!0,enableAnsiNullDefault:!0,enableAnsiPadding:!0,enableAnsiWarnings:!0,enableArithAbort:!1,enableConcatNullYieldsNull:!0,enableCursorCloseOnCommit:null,enableImplicitTransactions:!1,enableNumericRoundabort:!1,enableQuotedIdentifier:!0,encrypt:!1,fallbackToDefaultDb:!1,instanceName:void 0,language:"us_english",localAddress:void 0,maxRetriesOnTransientErrors:3,multiSubnetFailover:!1,packetSize:4096,port:1433,readOnlyIntent:!1,requestTimeout:15e3,rowCollectionOnDone:!1,rowCollectionOnRequestCompletion:!1,tdsVersion:"7_4",textsize:2147483647,trustServerCertificate:!0,useColumnNames:!1,useUTC:!0},...e};t.driver={SqlServerDriver:r,Connection:new r.Connection(t),Request:r.Request},super(t)}close(e){this.driver.Connection.close(),e()}connect(){this.driver.Connection.on("connect",e=>{if(e)return void console.error(e);const r=this.driver.Connection.config,t=r.server,n=r.options.port,s=r.options.database;console.log(`SQLServer at ms-sql-s://${t}:${n}/${s} is connected !`)})}init(){super.init()}on(){}};
